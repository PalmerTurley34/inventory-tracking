// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: inventory.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createInventoryItem = `-- name: CreateInventoryItem :one
INSERT INTO inventory_items (id, created_at, updated_at, name)
VAlUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name, checked_out_at, checked_in_at, due_at, user_id
`

type CreateInventoryItemParams struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
}

func (q *Queries) CreateInventoryItem(ctx context.Context, arg CreateInventoryItemParams) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, createInventoryItem,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
	)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CheckedOutAt,
		&i.CheckedInAt,
		&i.DueAt,
		&i.UserID,
	)
	return i, err
}

const getAllInventoryItems = `-- name: GetAllInventoryItems :many
SELECT id, created_at, updated_at, name, checked_out_at, checked_in_at, due_at, user_id FROM inventory_items
`

func (q *Queries) GetAllInventoryItems(ctx context.Context) ([]InventoryItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllInventoryItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InventoryItem
	for rows.Next() {
		var i InventoryItem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.CheckedOutAt,
			&i.CheckedInAt,
			&i.DueAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
