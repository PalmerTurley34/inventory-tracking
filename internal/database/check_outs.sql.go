// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: check_outs.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkInItem = `-- name: CheckInItem :one
UPDATE inventory_items
SET checked_out_at = NULL, user_id = NULL, due_at = NULL, checked_in_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, name, checked_out_at, checked_in_at, due_at, user_id
`

func (q *Queries) CheckInItem(ctx context.Context, id uuid.UUID) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, checkInItem, id)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CheckedOutAt,
		&i.CheckedInAt,
		&i.DueAt,
		&i.UserID,
	)
	return i, err
}

const checkOutItem = `-- name: CheckOutItem :one
UPDATE inventory_items
SET checked_out_at = NOW(),
    due_at = NOW() + INTERVAL '24 hours', 
    user_id = $2
WHERE id = $1
RETURNING id, created_at, updated_at, name, checked_out_at, checked_in_at, due_at, user_id
`

type CheckOutItemParams struct {
	ID     uuid.UUID  `json:"id"`
	UserID *uuid.UUID `json:"user_id"`
}

func (q *Queries) CheckOutItem(ctx context.Context, arg CheckOutItemParams) (InventoryItem, error) {
	row := q.db.QueryRowContext(ctx, checkOutItem, arg.ID, arg.UserID)
	var i InventoryItem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.CheckedOutAt,
		&i.CheckedInAt,
		&i.DueAt,
		&i.UserID,
	)
	return i, err
}

const getItemHistory = `-- name: GetItemHistory :many
select inventory_items.name, users.username, inventory_check_outs.checked_out_at, inventory_check_outs.checked_in_at
from inventory_check_outs
join inventory_items on inventory_check_outs.inventory_item_id = inventory_items.id
join users on inventory_check_outs.user_id = users.id
where inventory_check_outs.inventory_item_id = $1
order by inventory_check_outs.checked_out_at desc
`

type GetItemHistoryRow struct {
	Name         string     `json:"name"`
	Username     string     `json:"username"`
	CheckedOutAt time.Time  `json:"checked_out_at"`
	CheckedInAt  *time.Time `json:"checked_in_at"`
}

func (q *Queries) GetItemHistory(ctx context.Context, inventoryItemID uuid.UUID) ([]GetItemHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getItemHistory, inventoryItemID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetItemHistoryRow
	for rows.Next() {
		var i GetItemHistoryRow
		if err := rows.Scan(
			&i.Name,
			&i.Username,
			&i.CheckedOutAt,
			&i.CheckedInAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const logCheckIn = `-- name: LogCheckIn :one
UPDATE inventory_check_outs
SET checked_in_at = NOW(),
    updated_at = NOW()
WHERE inventory_item_id = $1 
AND user_id = $2 
AND checked_in_at IS NULL
RETURNING id, user_id, inventory_item_id, created_at, updated_at, checked_out_at, checked_in_at
`

type LogCheckInParams struct {
	InventoryItemID uuid.UUID `json:"inventory_item_id"`
	UserID          uuid.UUID `json:"user_id"`
}

func (q *Queries) LogCheckIn(ctx context.Context, arg LogCheckInParams) (InventoryCheckOut, error) {
	row := q.db.QueryRowContext(ctx, logCheckIn, arg.InventoryItemID, arg.UserID)
	var i InventoryCheckOut
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InventoryItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckedOutAt,
		&i.CheckedInAt,
	)
	return i, err
}

const logCheckOut = `-- name: LogCheckOut :one
INSERT INTO inventory_check_outs (id, created_at, updated_at, user_id, inventory_item_id, checked_out_at)
VALUES ($1, NOW(), NOW(), $2, $3, NOW())
RETURNING id, user_id, inventory_item_id, created_at, updated_at, checked_out_at, checked_in_at
`

type LogCheckOutParams struct {
	ID              uuid.UUID `json:"id"`
	UserID          uuid.UUID `json:"user_id"`
	InventoryItemID uuid.UUID `json:"inventory_item_id"`
}

func (q *Queries) LogCheckOut(ctx context.Context, arg LogCheckOutParams) (InventoryCheckOut, error) {
	row := q.db.QueryRowContext(ctx, logCheckOut, arg.ID, arg.UserID, arg.InventoryItemID)
	var i InventoryCheckOut
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InventoryItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckedOutAt,
		&i.CheckedInAt,
	)
	return i, err
}
