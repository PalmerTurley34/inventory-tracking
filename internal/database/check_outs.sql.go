// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: check_outs.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkInItem = `-- name: CheckInItem :one
UPDATE inventory_check_outs
SET checked_in_at = NOW(),
    updated_at = NOW()
WHERE inventory_item_id = $1 
AND user_id = $2 
AND checked_in_at IS NULL
RETURNING id, user_id, inventory_item_id, created_at, updated_at, checked_out_at, checked_in_at
`

type CheckInItemParams struct {
	InventoryItemID uuid.UUID `json:"inventory_item_id"`
	UserID          uuid.UUID `json:"user_id"`
}

func (q *Queries) CheckInItem(ctx context.Context, arg CheckInItemParams) (InventoryCheckOut, error) {
	row := q.db.QueryRowContext(ctx, checkInItem, arg.InventoryItemID, arg.UserID)
	var i InventoryCheckOut
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InventoryItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckedOutAt,
		&i.CheckedInAt,
	)
	return i, err
}

const checkOutItem = `-- name: CheckOutItem :one
INSERT INTO inventory_check_outs (id, created_at, updated_at, user_id, inventory_item_id, checked_out_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, inventory_item_id, created_at, updated_at, checked_out_at, checked_in_at
`

type CheckOutItemParams struct {
	ID              uuid.UUID `json:"id"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	UserID          uuid.UUID `json:"user_id"`
	InventoryItemID uuid.UUID `json:"inventory_item_id"`
	CheckedOutAt    time.Time `json:"checked_out_at"`
}

func (q *Queries) CheckOutItem(ctx context.Context, arg CheckOutItemParams) (InventoryCheckOut, error) {
	row := q.db.QueryRowContext(ctx, checkOutItem,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.InventoryItemID,
		arg.CheckedOutAt,
	)
	var i InventoryCheckOut
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InventoryItemID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckedOutAt,
		&i.CheckedInAt,
	)
	return i, err
}
