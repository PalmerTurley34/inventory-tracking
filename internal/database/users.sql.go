// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkUsernameExists = `-- name: CheckUsernameExists :one
SELECT COUNT(*) as user_count
FROM users
WHERE username = $1
`

func (q *Queries) CheckUsernameExists(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUsernameExists, username)
	var user_count int64
	err := row.Scan(&user_count)
	return user_count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, name, username, password)
VAlUES ($1, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, name, username, password, is_admin, api_key
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Username  string    `json:"username"`
	Password  string    `json:"-"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Username,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
		&i.ApiKey,
	)
	return i, err
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT id, created_at, updated_at, name, username, password, is_admin, api_key FROM users WHERE api_key = $1
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
		&i.ApiKey,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, name, username, password, is_admin, api_key FROM users WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.IsAdmin,
		&i.ApiKey,
	)
	return i, err
}
